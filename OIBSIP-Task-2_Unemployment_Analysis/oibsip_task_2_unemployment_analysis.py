# -*- coding: utf-8 -*-
"""OIBSIP-Task-2_Unemployment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r-doRg0nSJgSh0yR3AYZOEUbZpQKj0TU

# UNEMPLOYMENT ANALYSIS WITH PYTHON

# About the Dataset

The kaggle dataset "Unemployment In India" was used.This dataset tells the narrative of how the Covid-19 lockdown affects employment opportunities and how the unemployment rate rises. There are two subdatasets in this dataset.


1. India's unemployment
2. Employment Rate Through November 2020

From these two datasets, we must determine

1. Covid-19's impact on employment
2. The potential extent of the unemployment rate

The dataset includes 7 columns total.
Here, exploratory data analysis must be done.

# Unemployment in India Dataset

# Data Preparation
"""

# Importing Basis Libraries

import numpy as np
# numpy is aliased as np
import pandas as pd
# pandas is aliased as pd
import matplotlib.pyplot as plt
# pyplot is aliased as plt
import seaborn as sns
# seaborn is aliased as sns
sns.set_palette('viridis')
import datetime

import warnings
warnings.filterwarnings("ignore")

# Loading the Dataset
df = pd.read_csv("/content/Unemployment in India.csv")
df

# showing first 5 rows
df.head()

# showing last 5 rows
df.tail()

#  Showing dimension of the dataset
df.shape
# No. of Rows = 768
# No. of Columns = 7

# showing columns in the dataset
df.columns

# Removing starting and ending spaces from column names
df.columns = df.columns.str.strip()
df.columns

"""# Data Preprocessing and Data Cleaning"""

# showing data types of columns
df.dtypes

"""Handling Duplicated Values"""

# Checking for duplicated values
df.duplicated().sum()

#  Dropping duplicated values
df.drop_duplicates(inplace=True)
df

# Checking for duplicated values
df.duplicated().any()

"""Null Values Treatment

"""

# checking for null values
df.isna().sum()

# Dropping Null values
df.dropna(inplace=True)

# Checking for null values
df.isnull().any()

"""As there is only single null values found in the datset so we will drop this null value."""

df.nunique()

df['Region'].unique()

df['Date'].unique()

df['Frequency'].unique()

df['Area'].unique()

"""Data Cleaning in Frequency Column"""

# Changing Data Of Frequency Column
df['Frequency'].replace(' Monthly','Monthly',inplace=True)
df['Frequency'].unique()

"""Data Cleaning in Date column"""

# Changing Data Type of Date Column
df['Date']=pd.to_datetime(df['Date'])
df.dtypes

# Extracting Year , Month, and Day from Date Column
df['Year']=df['Date'].dt.year
df['Month']=df['Date'].dt.month
df['Day']=df['Date'].dt.day
df.head()

# Dropping Date Column
df.drop(['Date'],axis = 1, inplace=True)
df.columns

# showing info. about the dataset
df.info()

# Showing statistical information about numerical columns of dataset
df.describe()

# Showing statistical information about categorical columns of dataset
df.describe(include='O')

"""Extract all categorical columns and numerical columns"""

cat_cols = df.select_dtypes(include='object').columns
print(cat_cols)
num_cols = df.select_dtypes(exclude='object').columns
print(num_cols)

"""1. Area Column"""

df['Area'].value_counts()

# Plotting CountPlot for Area Column
sns.countplot(x=df['Area'])
plt.title('CountPlot for Area Column')
plt.show()

"""This Plot clearly shows most of the people belong to urban area"""

# Showing Percentage Distribution of Average Estimated Unemployment Rate Area wise
d1 = df.groupby('Area')['Estimated Unemployment Rate (%)'].mean()
d1

d1.plot(kind='pie',autopct='%.2f%%',cmap='Set1')
plt.title('Percentage Distribution of Estimated Unemployment Rate Area Wise',size=10)
plt.show()

"""This Plot clearly shows around 56.05 % Unemployment Rate exist in urban area which is more than rural area."""

# Showing Percentage Distribution of Average Estimated Labour Participation Rate Area wise
d2 = df.groupby('Area')['Estimated Labour Participation Rate (%)'].mean()
d2

d2.plot(kind='pie',autopct='%.2f%%',cmap='Set1')
plt.title('Percentage Distribution of Estimated Labour Participation Rate Area Wise',size=10)
plt.show()

"""This plot clearly shows Labour participation Rate is more in rural area than urban area which is around 52.09 %."""

# Showing Percentage Distribution of Average Estimated Employed Area wise
d3 = df.groupby('Area')['Estimated Employed'].mean()
d3

d3.plot(kind='pie',autopct='%.2f%%',cmap='Set1')
plt.title('Percentage Distribution of Employed Area Wise',size=10)
plt.show()

"""This Plot clearly shows that most of the people employed are from rural area.

2. Estimated Unemployment Rate (%) column
"""

# Frequency distribution of Estimated Unemployment Rate
sns.displot(df['Estimated Unemployment Rate (%)'],kde=True)
plt.title('Frequency distribution of Estimated Unemployment Rate')
plt.show()

"""3. Estimated Labour Participation Rate (%) column"""

# Frequency distribution of Estimated Labour Participation Rate
sns.displot(df['Estimated Labour Participation Rate (%)'],kde=True)
plt.title('Frequency distribution of Estimated Labour Participation Rate')
plt.show()

"""4. Estimated Employed column"""

# Distribution of Estimated Employed
plt.plot(df['Estimated Employed'])
plt.title('Distribution of Estimated Employed')
plt.show()

"""This plot clearly shows that most of the people employed range between 300-350.

5. Year column
"""

d4 = df['Year'].value_counts()
d4

# showing countplot for year column
d4.plot(kind='bar',color=['r','b'])
plt.title('Barplot for year column')
plt.show()

"""This Plot clearly shows that most of the people unemployed in the year 2019."""

# Showing Yearly Unemployment level area wise
sns.countplot(x=df['Year'],hue=df['Area'])
plt.title('Yearly Unemployment Area Wise')
plt.show()

"""This plot shows both the years Urban area have more unemployment level"""

# showing Estimated labour Participation rate yearly wise
sns.pointplot(y=df['Estimated Labour Participation Rate (%)'],x=df['Year'])
plt.show()

"""Labour Participate Rate is more in 2019 which is around 44 %."""

# showing Estimated Unemployment Rate (%) yearly wise
sns.pointplot(y=df['Estimated Unemployment Rate (%)'],x=df['Year'])
plt.show()

"""Estimated Unemployment Rate is more in 2020 which is around 15 %."""

# showing Estimated Employed yearly wise
sns.barplot(y=df['Estimated Employed'],x=df['Year'])
plt.show()

"""This plot shows that most people are employed in 2019.

6. Day Column
"""

df['Day'].value_counts()

# Showing Daily Unemployment level area wise
sns.countplot(x=df['Day'],hue=df['Area'])
plt.title('Countplot for Day column')
plt.show()

"""This Plot shows On 31 Unemployment Level is High in both the areas"""

# Plotting the graphs of average of 'Estimated Unemployment Rate (%)', 'Estimated Employed','Estimated Labour Participation Rate (%)' per day
day_df = df.groupby('Day').mean().reset_index()
print(day_df)

fig, axes = plt.subplots(1, 3, figsize=(15, 5))

axes[0].plot(day_df['Day'], day_df['Estimated Unemployment Rate (%)'], 'b')
axes[0].set_xlabel('Day')
axes[0].set_ylabel('Estimated Unemployment Rate (%)')
axes[0].set_title('Estimated Unemployment Rate (%) Per Day')

axes[1].plot(day_df['Day'], day_df['Estimated Employed'], 'r')
axes[1].set_xlabel('Day')
axes[1].set_ylabel('Estimated Employed')
axes[1].set_title('Estimated Employed Per Day')

axes[2].plot(day_df['Day'], day_df['Estimated Labour Participation Rate (%)'], 'g')
axes[2].set_xlabel('Day')
axes[2].set_ylabel('Estimated Labour Participation Rate (%)')
axes[2].set_title('Estimated Labour Participation Rate (%) Per Day')

plt.show()

"""This Plot displays:

Unemployment Rate in A
1. on 29 In general, the unemployment rate is rising.
2. The unemployment rate reached its peak on 30 and is now over 12.5%.
3. After age 30, it starts to fall to 11.5%.

B) Employed Per Day 1. On the 29th, it reaches its maximum Point, after which it continues to fall.
2. It drops to its lowest level on the 30th, which is 7%.
3. It starts to rise by 3% after 30.

Labour Force Participation Rate
1. It reaches its peak on the 29th and then begins falling.
2. It drops to 40% on the 30th, which is the lowest point.
3. It starts to rise by 3% after 30.

7. Month Column
"""

df['Month'].value_counts().sort_values()

# Plotting CountPlot for the Month column
sns.countplot(x=df['Month'])
plt.title('Countplot for Month column')
plt.show()

"""May has the highest Unemployment level"""

# Plotting the graphs of average of  'Estimated Unemployment Rate (%)', 'Estimated Employed','Estimated Labour Participation Rate (%)' per month
month_df = df.groupby('Month').mean().reset_index()

fig, axes = plt.subplots(1, 3, figsize=(15, 5))

axes[0].plot(month_df['Month'], month_df['Estimated Unemployment Rate (%)'], 'b')
axes[0].set_xlabel('Month')
axes[0].set_ylabel('Estimated Unemployment Rate (%)')
axes[0].set_title('Estimated Unemployment Rate (%) Per Month')

axes[1].plot(month_df['Month'], month_df['Estimated Employed'], 'r')
axes[1].set_xlabel('Month')
axes[1].set_ylabel('Estimated Employed')
axes[1].set_title('Estimated Employed Per Month')

axes[2].plot(month_df['Month'], month_df['Estimated Labour Participation Rate (%)'], 'g')
axes[2].set_xlabel('Month')
axes[2].set_ylabel('Estimated Labour Participation Rate (%)')
axes[2].set_title('Estimated Labour Participation Rate (%) Per Month')

plt.show()

"""Getting Information

1. The average estimated unemployment rate reaches its highest point in April before steadily dropping after that.
2. The Average Estimated Employment is at its lowest point in April, rises, and peaks in September.
3. The average estimated labour force participation rate reaches its lowest point in April, rises, and peaks in September.

8. Region Column
"""

df['Region'].value_counts()

# Plotting Unemployment level Region Wise
plt.figure(figsize=(10,10))
sns.countplot(x=df['Region'])
plt.title('Countplot for Region column')
plt.xticks(rotation=90)
plt.show()

"""From this Plot we can conclude the 5 Regions having lowest unemployment level.

1. Chandigarh
2. Sikkim
3. Jammu & kashmir
4. Goa
5. Assam

"""

#  Getting the Highest Estimated Unemployment Rate (%) Region Wise
a1=df.groupby(['Region'])['Estimated Unemployment Rate (%)'].sum().sort_values(ascending=True)
plt.figure(figsize=(30,30))
a1.plot(kind='barh')
plt.title('Estimated Unemployment Rate (%) Region Wise')
plt.xticks(rotation=90)
plt.show()

"""The Top 5 Regions having Highest Estimated Unemployment Rate.

1. Tripura
2. Haryana
3. Jarkhand
4. Bihar
5. Himachal Pradesh
"""

#  Getting the Highest Estimated Employed People Region Wise
a2=df.groupby(['Region'])['Estimated Employed'].sum().sort_values(ascending=True)
plt.figure(figsize=(30,30))
a2.plot(kind='barh')
plt.title('Estimated Employed People Region Wise')
plt.xticks(rotation=90)
plt.show()

"""The Top 5 Regions having Highest Estimated Employed People.

1. Uttar Pradesh
2. Maharastra
3. West Bengal
4. Bihar
5. Tamil Nadu
"""

#  Getting the Highest Estimated Labour Participation Rate (%) Region Wise
a3=df.groupby(['Region'])['Estimated Labour Participation Rate (%)'].sum().sort_values(ascending=True)
plt.figure(figsize=(30,30))
a3.plot(kind='barh')
plt.title('Estimated Labour Participation Rate (%) Region Wise')
plt.xticks(rotation=90)
plt.show()

"""The Top 5 Regions having Highest Estimated Labour Participation Rate.

1. Tripura
2. Meghalaya
3. Telangana
4. Gujarat
5. West Bengal
"""

# plot a histogram for data
df.hist(figsize=(10,10))
plt.show()

# plot a boxplot to check outliers
df.plot(kind="box", subplots=True, layout=(4,2), figsize=(14,11))
plt.show()

# showing correlation
df.corr()

# showing correlation plot
sns.heatmap(df.corr(),annot=True,cmap='Blues')
plt.show()

# showing pairplot for data area wise
sns.pairplot(df,hue='Area')
plt.show()

"""# Gathering Information
The largest rate of unemployment is in urban areas.
2. The rate of labour force participation is highest in rural areas.
3. The most estimated employed people are located in rural areas.
4. The highest unemployment rate was in 2019.
5. The highest unemployment rate was on December 31.
6. The highest rate of unemployment is in the month of May.
7. Chandigarh has the lowest unemployment rate in the country.
8. Tripura has the highest estimated unemployment rate in terms of percentage.
9. The highest estimated number of people in employment is in Uttar Pradesh.
10. The state with the highest estimated labour participation rate is Tripura.

# Unemployment Rate upto 11_2020 Dataset

# Data Preparation
"""

# loading the dataset
df1 = pd.read_csv('/content/Unemployment_Rate_upto_11_2020.csv')
df1

# showing the first 5 rows
df1.head()

# showing the last 5 rows
df1.tail()

"""# Basic Understanding of Dataset"""

# showing the dimension of data
df1.shape
# number of rows and columns are 267 and 9

# showing the column names
df1.columns

# Removing starting and ending spaces from column names
df1.columns = df1.columns.str.strip()
df1.columns

# checking for data types
df1.dtypes

# Checking for duplicates
df1.duplicated().sum()

# checking for null values
df1.isna().sum()

# checking for no. of unique values
df1.nunique().sort_values()

# checking for unique values of Frequency Column
df1['Frequency'].unique()

# checking for unique values of Region.1 Column
df1['Region.1'].unique()

# checking for unique values of Region Column
df1['Region'].unique()

# checking for unique values of Date Column
df1['Date'].unique()

# checking for unique values of latitude Column
df1['latitude'].unique()

# checking for unique values of longitude Column
df1['longitude'].unique()

# showing information of data
df1.info()

# Descriptive Statistical Analysis of Data
df1.describe(include='all')

"""# Data Cleaning

Data Cleaning In Frequency Column
"""

df['Frequency'].replace(' M','M',inplace=True)
df['Frequency'].unique()

"""Data Cleaning In Date Column"""

# Changing Data Type of Date Column
df1['Date']=pd.to_datetime(df1['Date'])
df1.dtypes

# Extracting Year , Month, and Day from Date Column
df1['Year']=df1['Date'].dt.year
df1['Month']=df1['Date'].dt.month
df1['Day']=df1['Date'].dt.day
df1.head()

# Dropping Date Column
df1.drop(['Date'],axis = 1, inplace=True)
df1.columns

"""# Feature Engineering"""

# Checking for unique values
df1.nunique().sort_values()

"""As we can see Frequency and Year Column has only single values So we will drop these columns."""

# Dropping Unnecessary Columns
df1.drop(['Frequency','Year'],axis = 1, inplace=True)
df1.columns

"""# Extracting all Categorical and Numerical Columns"""

cat_cols = df1.select_dtypes(include='object').columns
print(cat_cols)
num_cols = df1.select_dtypes(exclude='object').columns
print(num_cols)

"""# Data Visualization

1. Day Column
"""

# CountPlot for Day Column
sns.countplot(data=df1,x='Day')
plt.title('Countplot for Day Column')
plt.show()

"""Relationship between Unemployment Rate and Day."""

sns.pointplot(data=df1,x='Day',y='Estimated Unemployment Rate (%)',color='blue')
plt.show()

"""Relationship Between Day and Estimated Employed People."""

sns.pointplot(data=df1,x='Day',y='Estimated Employed',color='red')
plt.show()

"""Relationship Between Day and Estimated Labour Participation Rate."""

sns.pointplot(data=df1,x='Day',y='Estimated Labour Participation Rate (%)',color='green')
plt.show()

"""2. Region.1 Column"""

a1 = df1['Region.1'].value_counts()
a1

# Percentage Distribution of Region.1
plt.figure(figsize=(10,9))
a1.plot(kind='pie',autopct = '%.2f%%')
plt.title("Percentage Distribution of Region.1", fontsize=20)
plt.xlabel('Countries')
plt.show()

"""Unemployment Rate Region.1 wise."""

sns.barplot(data=df1,x='Region.1',y='Estimated Unemployment Rate (%)')
plt.title('Estimated Unemployment Rate (%) Region.1 Wise')
plt.show()

"""The Highest Unemployment Rate is in North India.

Labour Participation Rate Region.1 wise.
"""

sns.barplot(data=df1,x='Region.1',y='Estimated Labour Participation Rate (%)')
plt.title('Estimated Labour Participation Rate (%) Region.1 Wise')
plt.show()

"""Labour Participation Rate is more in Norheast India.

Employed People Region.1 wise.
"""

sns.barplot(data=df1,x='Region.1',y='Estimated Employed')
plt.title('Estimated Employed People Region.1 Wise')
plt.show()

"""Mostly East Indians are Employed.

3. Month Column
"""

df1['Month'].value_counts()

# Countplot for month Column
sns.countplot(data=df1,x='Month')
plt.title('Countplot for month Column')
plt.show()

"""Unemployment Rate Month wise."""

sns.stripplot(data=df1,x='Month',y='Estimated Unemployment Rate (%)')
plt.title('Estimated Unemployment Rate (%) Month Wise')
plt.show()

"""Estimated Employed Month wise."""

sns.stripplot(data=df1,x='Month',y='Estimated Employed')
plt.title('Estimated Employed People Month Wise')
plt.show()

"""Labour Participation Rate Month wise."""

sns.stripplot(data=df1,x='Month',y='Estimated Labour Participation Rate (%)')
plt.title('Estimated Labour Participation Rate (%) Month Wise')
plt.show()

"""4. latitude Column"""

# kde plot for latitude column
sns.kdeplot(x=df1["latitude"],color="blue")
plt.title("KDE plot for latitude column")
plt.show()

"""Unemployment Rate, Labour Participation Rate, and Employed People latitude wise.

5. longitude column
"""

# kde plot for longitude column
sns.kdeplot(x=df1["longitude"],color="blue")
plt.title("KDE plot for longitude column")
plt.show()

"""6. Region Column"""

# CountPlot for Region Column
plt.figure(figsize=(10,10))
sns.countplot(data=df1,x='Region')
plt.title('Countplot for Region Column')
plt.xticks(rotation=90)
plt.show()

"""Sikkim and Jammu Kashmir have lowest Unemployment level.

Unemployment Rate Region wise.
"""

plt.figure(figsize=(10,10))
sns.lineplot(data=df1,x='Region',y='Estimated Unemployment Rate (%)')
plt.title('Estimated Unemployment Rate (%) Region Wise')
plt.xticks(rotation=90)
plt.show()

"""Haryana has highest Unemployment Rate.

Labour Participation Rate Region wise.
"""

plt.figure(figsize=(10,10))
sns.lineplot(data=df1,x='Region',y='Estimated Labour Participation Rate (%)')
plt.title('Estimated Labour Participation Rate (%) Region Wise')
plt.xticks(rotation=90)
plt.show()

"""Labour Participation Rate is more in Meghalaya.

Employed People Region wise.
"""

plt.figure(figsize=(10,10))
sns.lineplot(data=df1,x='Region',y='Estimated Employed')
plt.title('Estimated Employed People Region Wise')
plt.xticks(rotation=90)
plt.show()

"""Employeed People are most in Uttar Pradesh."""

# Plotting Histogram for data
df1.hist(figsize=(10,10))
plt.show()

# Plotting BoxPlot for data
df1.plot(kind='box',subplots=True, layout=(4,2),figsize=(20,20))
plt.show()

# Showing Correlation
corr = df1.corr()
corr

# Plotting Correlation PLot
sns.heatmap(corr,cmap='viridis',annot=True)
plt.show()

# showing pairplot Region.1 Wise
sns.pairplot(df1,hue='Region.1')
plt.show()

"""# Gathering Information
1. On December 30th, the unemployment rate is greatest.
2. The highest labour participation rate is on the 29th.
3. The most employed workers are on position 29.
4. North India has the highest rate of unemployment.
5. In Northeast India, the labour participation rate is higher.
6. Most Employed are East Indians.
7. The unemployment rate in May is the highest.
8. In January, the majority of people had jobs.
9. The lowest Labour Participation Rate is occurring in April.
10. Haryana has the highest rate of unemployment.
11. Meghalaya has a higher rate of labour participation.
12. People with jobs tend to live in Uttar Pradesh.

"""